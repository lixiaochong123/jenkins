<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>demo</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!--指定生成的镜像名-->
                    <imageName>chongdemo</imageName>
                    <!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>

                    <!--指定基础镜像jdk1.8-->
                    <baseImage>openjdk:8-jdk-alpine</baseImage>
                    <baseImage>java:8</baseImage>
                    <!-- 镜像制作人本人信息-->
                    <maintainer>chong@email.com</maintainer>


                    <!-- 结合dockerfile 构建，不需要指定基础镜像，暴露端口，因为在Dockerfilr中指定-->
                    <!--<dockerDirectory>Dockerfile的路径</dockerDirectory>-->

                    <!--指定登录容器默认到/目录-->
                    <workdir>/</workdir>
                    <!--           构建镜像的时候需要在镜像容器中运行的 linux命令          -->
                    <!--                    <runs>-->
                    <!--                        <run>-->
                    <!--                        </run>-->
                    <!--                    </runs>-->

                    <!--查看我们的java版本-->
                    <cmd>["java", "-version"]</cmd>
                    <!--${project.build.finalName}.jar是打包后生成的jar包的名字  -Duser.timezone=GMT+8 ：设置时区同步(项目时间为东八区标准时间)-->
                    <entryPoint>["java","-Duser.timezone=GMT+8", "-jar", "/${project.build.finalName}.jar"]</entryPoint>

                    <!--指定远程 docker api地址（docker服务器的ip+docker的远程端口）-->
                    <dockerHost>http://192.168.128.3:2375</dockerHost>

                    <!--容器服务的端口（暴露的端口）-->
<!--                    <exposes>86</exposes>-->

                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
<!--                            <directory>${project.build.directory}</directory>-->
                            <directory>${project.build.directory}</directory>
                            <!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
<!--                            <include>${project.build.finalName}.jar</include>-->
                            <include>cccdemo.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
